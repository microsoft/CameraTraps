#
# read_from_tf_records.py
#
# Reads detection results from a tfrecords file of the style generated by the TFODAPI inference script, 
# and converts it to a .p file that's friendly to other tools in this repo, e.g. detection/detector_eval.
#
# Detection and ground truth bounding box coordinates are in the format of [ymin, xmin, ymax, xmax].
#

import argparse
import pickle

import iterate_tfrecords


def read_from_tfrecords(data_path, features_to_extract):
    records = iterate_tfrecords.yield_record([data_path], features_to_extract)

    data = []
    for record in records:
        data.append(record)

    images = []
    detection_boxes = []
    detection_labels = []
    detection_scores = []
    gt_boxes = []
    gt_labels = []
    image_heights = []
    image_widths = []

    for im in data:
        images.append(im['id'])
        h = im['height']
        w = im['width']
        image_heights.append(h)
        image_widths.append(w)

        im_boxes = []
        for idx in range(len(im['detection_label'])):
            box = [im['detection_ymin'][idx], im['detection_xmin'][idx], im['detection_ymax'][idx],
                   im['detection_xmax'][idx]]
            im_boxes.append(box)
        im_scores = im['detection_score']  # the min score is very small; scores like 1e-5 are also saved
        im_box_labels = im['detection_label']

        detection_boxes.append(im_boxes)
        detection_scores.append(im_scores)
        detection_labels.append(im_box_labels)

        im_boxes_gt = []
        for idx in range(len(im['label'])):
            box = [im['ymin'][idx], im['xmin'][idx], im['ymax'][idx], im['xmax'][idx]]
            im_boxes_gt.append(box)
        im_gt_labels = im['label']
        gt_boxes.append(im_boxes_gt)
        gt_labels.append(im_gt_labels)

    detection_results = {}
    detection_results['images'] = images
    detection_results['detection_boxes'] = detection_boxes
    detection_results['detection_scores'] = detection_scores
    detection_results['detection_labels'] = detection_labels
    detection_results['gt_boxes'] = gt_boxes
    detection_results['gt_labels'] = gt_labels

    return detection_results


def parse_args():
    parser = argparse.ArgumentParser(description='Make tfrecords from a CCT style json file')

    parser.add_argument('--input_tfrecord_file', dest='input_tfrecord_file',
                        help='Path to detection tfrecords',
                        type=str, required=True)
    parser.add_argument('--output_file', dest='output_file',
                        help='Path to store output dict',
                        type=str, required=True)
    parser.add_argument('--no_gt_bboxes', dest='no_gt_bboxes',
                        help='Flag to use if your tfrecords do not contain ground truth bboxes',
                        action='store_true', default=False)

    args = parser.parse_args()

    return args


def main():
    args = parse_args()

    if args.no_gt_bboxes:
        features_to_extract = [('image/id', 'id'),
                               ('image/class/label', 'label')
                               ('image/detection/label', 'detection_label'),
                               ('image/detection/bbox/xmin', 'detection_xmin'),
                               ('image/detection/bbox/xmax', 'detection_xmax'),
                               ('image/detection/bbox/ymin', 'detection_ymin'),
                               ('image/detection/bbox/ymax', 'detection_ymax'),
                               ('image/detection/score', 'detection_score'),
                               ('image/height', 'height'),
                               ('image/width', 'width')
                               ]
    else:
        features_to_extract = [('image/id', 'id'),
                               ('image/object/bbox/xmin', 'xmin'),
                               ('image/object/bbox/xmax', 'xmax'),
                               ('image/object/bbox/ymin', 'ymin'),
                               ('image/object/bbox/ymax', 'ymax'),
                               ('image/object/bbox/label', 'label'),
                               ('image/detection/label', 'detection_label'),
                               ('image/detection/bbox/xmin', 'detection_xmin'),
                               ('image/detection/bbox/xmax', 'detection_xmax'),
                               ('image/detection/bbox/ymin', 'detection_ymin'),
                               ('image/detection/bbox/ymax', 'detection_ymax'),
                               ('image/detection/score', 'detection_score'),
                               ('image/height', 'height'),
                               ('image/width', 'width')
                               ]

    detection_results = read_from_tfrecords(args.input_tfrecord_file, features_to_extract)
    pickle.dump(detection_results, open(args.output_file, 'wb'))


if __name__ == '__main__':
    main()
